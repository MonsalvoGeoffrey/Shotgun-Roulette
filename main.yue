


local *


table_shuffle = (table) ->
    for i = #table, 2, -1
        j = math.random i
        table[i], table[j] = table[j], table[i]
    return table



macro PLAYER = -> "false"
macro OPPONENT = -> "true"
macro RANDOM_TARGET = -> "math.random! < 0.5"
macro LIVE = -> "true"
macro BLANK = -> "false"



    if live == 4 and blank == 4
    elseif live == 4 and blank == 3
    elseif live == 4 and blank == 2
    elseif live == 4 and blank == 1
    elseif live == 4 and blank == 0 -- 0% safe | 100% deadly
        return $OPPONENT
    
    elseif live == 3 and blank == 4
    elseif live == 3 and blank == 3
    elseif live == 3 and blank == 2
    elseif live == 3 and blank == 1
    elseif live == 3 and blank == 0 -- 0% safe | 100% deadly
        return $OPPONENT

    elseif live == 2 and blank == 4
    elseif live == 2 and blank == 3
    elseif live == 2 and blank == 2
    elseif live == 2 and blank == 1
    elseif live == 2 and blank == 0 -- 0% safe | 100% deadly
        return $OPPONENT

    elseif live == 1 and blank == 4
    elseif live == 1 and blank == 3 -- 50% safe | 9% deadly
        -- if self:
        -- -- 75% * 67% = 50%
        -- if opponent:
        -- -- 25% * 33% = 9%
        return $PLAYER
    elseif live == 1 and blank == 2 -- 33% safe | 67% deadly
        -- If self:
        -- -- 67% safe
        -- -- -- 67% * 50% = 33% to hit
        -- -- 33% deadly
        -- -- -- Cannot hit
        -- If opponent:
        -- -- 33% to hit
        -- -- -- Cannot be hit
        -- -- 67% to miss
        -- -- -- 67% * 50% = 33% to be hit
        -- -- -- -- 100% to hit
        return $OPPONENT
    elseif live == 1 and blank == 1 -- 50% safe | 50% deadly
        return $OPPONENT
    elseif live == 1 and blank == 0 -- 0% safe | 100% deadly
        return $OPPONENT

    elseif live == 0 and blank == 4 -- 100% safe | 0% deadly
        return $PLAYER
    elseif live == 0 and blank == 3 -- 100% safe | 0% deadly
        return $PLAYER
    elseif live == 0 and blank == 2 -- 100% safe | 0% deadly
        return $PLAYER
    elseif live == 0 and blank == 1 -- 100% safe | 0% deadly
        return $PLAYER
    elseif live == 0 and blank == 0 -- Never happens
        return $OPPONENT



class Game
    new: (@player_strategy = "random", @opponent_strategy = "random", @verbose = false) =>
        @shotgun = {}
        @player = 6
        @opponent = 6
        @turn = $PLAYER
        @load!
    load: =>
        @shotgun[] = $LIVE for i = 1, (math.random 1, 4)
        @shotgun[] = $BLANK for i = 1, (math.random 1, 4)
        @shotgun = table_shuffle @shotgun
        @turn = $PLAYER
    shot: (target) =>


        shooter = "Player"
        shooter = "Opponent" if @turn == $OPPONENT
        target_str = "Player"
        target_str = "Opponent" if target == $OPPONENT

        bullet = table.remove @shotgun
        if bullet == $LIVE
            if target == $PLAYER
                @player -= 1
            else
                @opponent -= 1

        bullet_type = "LIVE"
        bullet_type = "BLANK" if bullet == $BLANK
        print "#{shooter} shoots at #{target_str} with a #{bullet_type}!" if @verbose

        unless bullet == $BLANK and target == @turn
            @turn = not @turn
        return bullet
    step: =>
        strategy = @player_strategy
        strategy = @opponent_strategy if @turn == $OPPONENT
        target = $OPPONENT

        if strategy == "always_shot_opponent"
            target = $OPPONENT
        elseif strategy == "always_shot_self"
            target = $PLAYER
        elseif strategy == "smart_live"
            target = $RANDOM_TARGET
            target = $OPPONENT if #@shotgun == #[i for i in *@shotgun when i == $LIVE]
        elseif strategy == "smart_blank"
            target = $RANDOM_TARGET
            target = $PLAYER if #@shotgun == #[i for i in *@shotgun when i == $BLANK]
        elseif strategy == "smart_live_and_blank"
            target = $RANDOM_TARGET
            target = $PLAYER if #@shotgun == #[i for i in *@shotgun when i == $BLANK]
            target = $OPPONENT if #@shotgun == #[i for i in *@shotgun when i == $LIVE]
        elseif strategy == "probability_live"
            target = $RANDOM_TARGET
            target = $OPPONENT if (#@shotgun / 2) <= #[i for i in *@shotgun when i == $LIVE]
        elseif strategy == "probability_blank"
            target = $RANDOM_TARGET
            target = $PLAYER if (#@shotgun / 2) < #[i for i in *@shotgun when i == $BLANK]
        elseif strategy == "probability_live_and_blank"
            target = $RANDOM_TARGET
            target = $OPPONENT if (#@shotgun / 2) <= #[i for i in *@shotgun when i == $LIVE]
            target = $PLAYER if (#@shotgun / 2) < #[i for i in *@shotgun when i == $BLANK]
        elseif strategy == "dealer"
            target = $RANDOM_TARGET
            target = $PLAYER if #@shotgun == 1 and @shotgun[1] == $BLANK
            target = $OPPONENT if #@shotgun == 1 and @shotgun[1] == $LIVE
        else
            target = $RANDOM_TARGET

        target = not target if @turn == $OPPONENT
        @shot target
        @load! if @is_shotgun_empty!
    is_shotgun_empty: => #@shotgun == 0
    is_game_done: => @player == 0 or @opponent == 0
    is_won: => @opponent == 0
    <tostring>: =>
        "--------------------------------------------------
Player HP: #{@player}
Opponent HP: #{@opponent}
Shotgun: #{#@shotgun} bullets
--------------------------------------------------"

    



simulate_game = (player_strategy, opponent_strategy) ->
    game = Game player_strategy, opponent_strategy
    game\step! until game\is_game_done!
    game\is_won!

simulate_games = (count, player_strategy, opponent_strategy) ->
    won = 0
    total = count
    for i = 1, total
        if simulate_game player_strategy, opponent_strategy
            won += 1
    won


all_strategies = {"random", "always_shot_opponent", "always_shot_self", "smart_live", "smart_blank", "smart_live_and_blank", "probability_live", "probability_blank", "probability_live_and_blank", "dealer"}


player_strategy_cursor = 1
opponent_strategy_cursor = 1


simulation = 10000

for player_strategy_cursor = 1, #all_strategies
    print "Player Strategy: #{all_strategies[player_strategy_cursor]}"
    for opponent_strategy_cursor = 1, #all_strategies
        won = simulate_games simulation, all_strategies[player_strategy_cursor], all_strategies[opponent_strategy_cursor]
        print "#{won}/#{simulation} | (#{won/simulation*100}%) against #{all_strategies[opponent_strategy_cursor]}"

















